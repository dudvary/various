' Script to extract Spike Latencies
' Print Latencies for each stimulus/event to Log1 in format (click on window and then on Log1): 
'   #Event,StimulusInterval[s],LatenciesOfSpikesWithinInterval[s],
'   prints then for each event:
'       number of stimuli (#Event),
'       time period between the stimuli (StimulusInterval) 
'           NOTE: The last stimulus will have a longer stimulus interval until maximum recording time
'       time period (latencies) to all spikes from onset of event that are within (!) stimulus interval time
'
' User is prompted to open Data file with traces
' User is asked to select Channel with Events\Triggers, WaveMarkChannel with Spikes
' 
' ------------------------
' Author: Daniel Udvary
' Date: July 25 2018
' Version: 2
'   adapted from GetSpikeLatency.s2s
'   prints all spike times sorted by preceeding event
' ------------------------

FilePathSet("\\\\IBS9010\\current_data\\Data_Mike\\Spike2\\");
var data%:= FileOpen("",0,1); 

if data% > 0 then
    
    ' Default channel numbers for event/trigger/stimulus channel
    ' and spike channel (either wavemark or event channel)
    var chEvents% := 6; 
    var chSpikes% := 5;

    ' Open Dialog Box for Channel Settings to extract Spike Latencies
    DlgCreate("Channel Settings");
    DlgChan(1,"TriggerChannel",2); ' Only Event Channels
    DlgChan(2,"SpikeChannel",18); ' Event (2) and Wavemark (16) Channels
    var ok := DlgShow(chEvents%, chSpikes%);

    'If pressed OK
    if ok=1 then
        
        ' Check if there are any Events in Channel
        var numEvents% := Count(chEvents%,0,MaxTime()); 
        var numSpikes% := Count(chSpikes%,0,MaxTime()); 
                
        if (numEvents%>0 and numSpikes%>0) then
            
            ' Print out results
            PrintLog("#Event,StimulusInterval[s],LatenciesOfSpikesWithinStimulusInterval[s],\n");    
        
            var event%;
            
            ' Time point of first Event
            var tpreviousStim := NextTime(chEvents%,-1);
            
            for event% := 1 to numEvents% do
                                
                ' Next Time of Stimulus
                var tnextStim := NextTime(chEvents%,tpreviousStim);
                
                ' If negative time, no more stimulus, use maximum time instead
                if tnextStim<0 then
                    tnextStim := MaxTime();
                endif;
                
                ' Calculate Stimulus Interval
                var tStimulus := tnextStim-tpreviousStim;
                
                ' Print Event number and Interstimulus interval
                PrintLog("%d,%.4f,",event%,tStimulus);
                
                ' Print all spikes times that are within stimulus intervall
                ' Time of Spike After Stimulus
                var spikesFound := 1;
                var currTime := tpreviousStim; 
                
                while spikesFound do
                    
                    ' Find next spike and calculate Spike Latency
                    var tSpike := NextTime(chSpikes%,currTime); 
                    
                    if tSpike < 0 then
                        spikesFound := 0;
                    else; 
                    
                        var tLatency := tSpike-tpreviousStim;
                        
                        currTime := tSpike; 
                        
                        if tLatency < tStimulus then
                            PrintLog("%.4f,",tLatency);
                        else
                            spikesFound := 0;
                        endif;
                        
                    endif;
                    
                wend;
                
                PrintLog("\n");
                
                tpreviousStim := tnextStim;
            next;
        else
            PrintLog("ERROR! Found %d events in Channel %d and %d spikes in Channel %d\n",numEvents%,chEvents%,numSpikes%,chSpikes%);          
        endif;
        FrontView(LogHandle());
    endif;
endif;